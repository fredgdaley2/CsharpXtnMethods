
Full list of Extension Methods in CSharpExtensionMethods library as of version 1.0.7.


******************* String Extensions *******************

        public static string ToDelimitedValue(this object source, string delimiter = Comma, bool addDelimiter = true)
        
        public static string ToDelimitedValueForceQuotes(this object source, string delimiter = Comma, bool addDelimiter = true)
        
        public static string AddBlankLines(this string source, int numberOfBlankLines)

        /// <summary>
        /// Return Left specified number of characters
        /// </summary>
        public static string Left(this string source, int length)

        /// <summary>
        /// Return Right specified number of characters
        /// </summary>
        public static string Right(this string source, int length)
        
        public static bool IsValidEmailAddress(this string source)

        public static string RemoveCharZero(this string source)

        public static double ToDouble(this string source)

        public static decimal ToDecimal(this string source)

        public static float ToFloat(this string source)

        public static int ToInt(this string source)

        public static long ToLong(this string source)


        /// <summary>
        /// Return a string from a fixed field string at a given position, startIndex, and given length
        /// </summary>
        public static string ParseFixedFld(this string source, int startIndex, int length)
        
        public static String DefaultIfEmpty(this string source, string defValue)

        public static string DefaultIfNullOrEmpty(this string source, string defaultString)

        public static string DefaultIfNullOrWhiteSpace(this string source, string defaultString)

        /// <summary>
        /// Converts a string to DateTime and if string is empty then returns 01/01/1900 12:00:00 AM.
        /// </summary>
        public static DateTime DefaultDateIfEmpty(this string source)

        /// <summary>
        /// Returns 01/01/1900 12:00:00 AM.
        /// </summary>
        public static DateTime DefaultDate()

        public static string RemoveNonNumericCharacters(this string source)

        public static string RemoveNonNumericCharactersExcludingPeriods(this string source)
        
        public static string RemoveNonNumericCharactersExcludingCommas(this string source)

        public static string RemoveNonNumericCharactersExcludingCustomChar(this string value, string excludedChar)

        public static string RemoveNumericCharacters(this string value)

        /// <summary>
        ///  Removes the extended ascii double quotes and replaces them
        ///  with the non-extended ascii double quotes
        /// </summary>
        /// <param name="source"></param>
        /// <returns></returns>
        /// <remarks></remarks>

        public static string ReplaceExtAsciiDblQuotes(this string source)

        /// <summary>
        /// Check if string is a valid date.
        /// </summary>
        public static bool IsDate(this string source)

        /// <summary>
        /// Removes all control line feed and tab characters: \n\r\t
        /// </summary>
        public static string RemoveCrLfTab(this string source)

        /// <summary>
        /// Removes all control line feed characters: \n\r
        /// </summary>
        public static string RemoveCrLf(this string source)

        /// <summary>
        /// Removes all tab characters
        /// </summary>
        public static string RemoveTab(this string source)

        /// <summary>
        /// Appends the given value separated by the given separator
        /// </summary>
        public static string AddSeparator(this string source, string valueToAppend, char separator)

        /// <summary>
        /// Short for IsNullOrEmpty
        /// </summary>
        public static bool IsEmpty(this string source)

        public static string ToMySqlWindowsPath(this string source)

        /// <summary>
        /// Removes the last occurrence of a given value.
        /// </summary>
        public static string RemoveLastOccurrenceOf(this string source, string valueToRemove)

        /// <summary>
        /// Return the string quoted if contains given delimiter
        /// </summary>
        public static string EncloseInQuotes(this string source, string delimiter)

        /// <summary>
        /// Return the string quoted.
        /// </summary>
        public static string ToQuoted(this string source)

        /// <summary>
        /// Converts a string to byte[].
        /// </summary>
        public static byte[] ToByteArray(this string source)

        /// <summary>
        /// Return the abbreviation of a given string by removing all vowels.
        /// </summary>
        public static String Abbrev(this String source)

        /// <summary>
        ///Credit goes to ScubaSteve's answer: https://stackoverflow.com/questions/206717/how-do-i-replace-multiple-spaces-with-a-single-space-in-c
        ///Performs better than Regex and more effecient than using this -> while(str.Contains("  ")) str = str.Replace("  ", " ");
        /// Reduces multiple occurrences of whitespace down to one.
        /// </summary>
        public static String ReduceWhitespace(this String source)

        /// <summary>
        /// Implement's VB's Like operator logic.
        /// </summary>
        public static bool IsLike(this string s, string pattern)

        /// <summary>
        /// Converts a string of characters to a HashSet of characters. If the string
        /// contains character ranges, such as A-Z, all characters in the range are
        /// also added to the returned set of characters.
        /// </summary>
        /// <param name="charList">Character list string</param>
        private static HashSet<char> CharListToSet(string charList)

        public static string FormatEmailForHref(this string source, string emailSubject)

        public static string FormatPhoneForHref(this string source)

        /// <summary>
        /// Returns phone number string formatted as "(###) ###-####"
        /// </summary>
        public static string FormatPhoneForDisplay(this string source)


        /// <summary>
        /// Checks if a phone number is toll free by checking for these exchanges 800 844 855 866 877 888.
        /// </summary>
        public static bool IsPhoneTollFree(this string source)

        public static string SqlInjectionFilter(this string source)
        
        
        /// <summary>
        /// Replaces ' with ''
        /// </summary>
        public static string FixSql(this string source)

        /// <summary>
        /// Returns a string padded left with zero(s) given the desired length.
        /// </summary>
        public static string PadWithZero(this string source, int length)

        /// <summary>
        /// Returns a string padded left with letter A(s) given the desired length.
        /// </summary>
        public static string PadWithA(this string source, int length)


        /// <summary>
        /// Returns a title case string
        /// </summary>
        public static string ToTitleCase(this string source)

        /// <summary>
        /// Returns a string formatted as money {0:C?} given the number of decimals.
        /// </summary>
        public static string FormatToMoney(this string source, int numOfDecimals = 0)

        public static string FormatToInt(this string source)

        /// <summary>
        /// Returns the input string with the first character converted to uppercase
        /// </summary>
        public static string FirstLetterToUpperCase(this string source)
        
        /// <summary>
        /// Returns a FileInfo object from a filePath if exists.
        /// </summary>
        public static FileInfo ToFileInfo(this string filePath)

        /// <summary>
        /// Converts the pascal-cased string to a displayable string
        /// </summary>
        public static string ToDisplayable(this string value)

        /// <summary>
        /// Compare string equality. Uses string.Compare for better performance instead of ToUpper or ToLower compare.
        /// </summary>
        /// <param name="comparee">string to compare.</param>
        /// <param name="ignoreCase">default is true. Set to false for case sensitive compare.</param>
        /// <returns></returns>
        public static bool IsEqualTo(this string value, string comparee, bool ignoreCase = true)

        public static bool IsNumber(this string value)
        
        
        /// <summary>
        /// Just calls PadRight but AlignLeft means and sound better.
        /// </summary>
        public static string AlignLeft(this string value, int totWidth)

        /// <summary>
        /// Just calls PadLeft but AlignRight means and sound better.
        /// </summary>
        public static string AlignRight(this string value, int totWidth)

******************* Date Extensions *******************


        /// <summary>
        /// Get the last date of the month.
        /// </summary>
        /// <param name="source"></param>
        /// <returns>Last date of the month as a DateTime</returns>
        public static DateTime EndOfTheMonth(this DateTime source)

        /// <summary>
        /// Get the month name
        /// </summary>
        /// <param name="source"></param>
        /// <returns>The month name as string</returns>
        public static String ToMonthName(this DateTime source)

        /// <summary>
        /// Check if a date is between a range of two dates
        /// </summary>
        /// <param name="inBetweenDate"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <returns>true if the inBetweenDate is between the range of startDate and endDate</returns>
        public static bool IsDateBetween(this DateTime inBetweenDate, DateTime startDate, DateTime endDate)


        /// <summary>
        /// Get the next occurrence of a given day. i.e.  Get the next Monday's date.
        /// </summary>
        /// <param name="source"></param>
        /// <param name="dayOfWeek"></param>
        /// <returns>next occurrence of a given day as DateTime</returns>
        public static DateTime GetNextOccDayOfWeek(this DateTime source, DayOfWeek dayOfWeek)
        
        /// <summary>
        /// Get the next business day
        /// </summary>
        /// <param name="source"></param>
        /// <returns>next business day as DateTime</returns>
        public static DateTime GetNextBussinessDay(this DateTime source)


        /// <summary>
        /// Check if date is an weekend day
        /// </summary>
        /// <param name="source"></param>
        /// <returns>true if date is a weekend day</returns>
        public static bool IsWeekEnd(this DateTime source)

        public static int YearsOld(this DateTime source)

        /// <summary>
        /// Formats DateTime as yyyy-MM-dd HH:mm:ss
        /// Removes the time if time is 00:00:00
        /// </summary>
        /// <param name="source"></param>
        /// <returns>DateTime as string "yyyy-MM-dd HH:mm:ss" or "yyyy-MM-dd" if time is zero</returns>
        public static String ToMySqlDateFormat(this DateTime source)


******************* Value Type Extensions *******************

     public static int ToInt(this bool value)

        /// <summary>
        /// Returns a string formatted as money {0:C?} given the number of decimals.
        /// </summary>
        public static string FormatToMoney(this decimal source, int numOfDecimals = 0)


        /// <summary>
        /// Returns a string formatted as money {0:C?} given the number of decimals.
        /// </summary>
        public static string FormatToMoney(this double source, int numOfDecimals = 0)


        /// <summary>
        /// Returns a string formatted like #,###;(0);zero
        /// </summary>
        public static string Format(this int source)


******************* Generics Extensions *******************


        /// <summary>
        /// Check if a value exists in a List
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="source"></param>
        /// <param name="value"></param>
        /// <returns>true if value exists in the List</returns>
        public static bool Exists<T>(this List<T> source, T value)

        /// <summary>
        /// Reads the entire file of the given fileName
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="filePath"></param>
        /// <returns>The contents of the file as byte[]</returns>
        public static byte[] GetFileData(this string fileName, string filePath)

        /// <summary>
        /// Converts a string to a stream
        /// </summary>
        /// <param name="str"></param>
        /// <returns>Stream</returns>
        public static Stream ToStream(this string str)

        /// <summary>
        /// Get the string value of a property name of an object
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="TProp"></typeparam>
        /// <param name="o"></param>
        /// <param name="propertySelector"></param>
        /// <returns>name of property as string</returns>
        public static string Name<T, TProp>(this T o, Expression<Func<T, TProp>> propertySelector)

        /// <summary>
        /// Converts the pascal-cased property name to a displayable name. Like DisplayName turns into Display Name
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="TProp"></typeparam>
        /// <param name="o"></param>
        /// <param name="propertySelector"></param>
        /// <returns></returns>
        public static string GetDisplayName<T, TProp>(this T o, Expression<Func<T, TProp>> propertySelector)

        /// <summary>
        /// Check if object is in a given list of values
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="object"></param>
        /// <param name="values"></param>
        /// <returns>true if object is in the given list of values</returns>
        public static bool In<T>(this T @object, params T[] values)


        public static IEnumerable<T> RemoveDuplicates<T>(this ICollection<T> list, Func<T, int> predicate)


        public static IEnumerable<TSource> DistinctBy<TSource, TKey>(
                   this IEnumerable<TSource> source,
                   Func<TSource, TKey> keySelector)
        
******************* Enum Extensions *******************

        /// <summary>
        /// Convert to Enum
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="value"></param>
        /// <returns></returns>
        public System.Nullable<T> ToEnum<T>(string value) where T : struct


******************* TextFieldParser  Extensions *******************

public static void SkipHeaderRow(this TextFieldParser source)
